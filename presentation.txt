Developing for
Accessibility

This talk has one focus:

To teach you small ways
that you can code for
accessibility

40% talk / 60% demo

Who am I?

Aaron Krauss

I like:
* tea
* cocktails
* longboarding

I have a beautiful wife
and a beautiful son

Professional developer
in Oklahoma City
since 2011

Technical Lead of
New Development

@images/clevyr.png

@images/techlahoma.png

Involved since before
Techlahoma existed

Active speaker
since 2014

Former Techlahoma
Board Member
(2018 - 2019)

User group leader
of 3 groups

* OKC Ruby (2018 - 2020)
* OKC WebDevs (since 2020)
* OKC Coffee and Code (since 2022)

@images/okc-webdevs.png

@images/okc-coffee-and-code.png

So what are we
going to talk about?

Developing for Accessibility

What is Accessibility?

a11y

Accessibility = caring about people

All people

That includes users with disabilities

And also users with no disabilities at all

The Pitch

Building an accessible web site
makes your website better overall

* More quality content
* Better design architecture
* Better code architecture
* Better SEO
* More usage and popularity

And all of that usually means more $$$

@images/make-money.png

Developing an accessibile site
may also be required

Section 508

It requires all Federal electronic
content to be accessible

Some housekeeping...

Don't say "disabled users"

Say "users with disabilities"

Myth Busing Time

Myth #1

Accessibility = handling blind users

Wrong

Accessibility = handling everyone

Myth #2

Accessibility = add image alt text

Wrong

Accessibility = a ton of stuff

But it's okay...

@images/we-can-do-this.png

Types of Disabilities

* Visual
* Motor
* Auditory
* Cognitive

Followed by a bonus disability

Visual Concerns

* Low-or-no Vision
* Color-blindness
* Contrast

Low-or-no Vision

People will often use screen readers

Windows - JAWS
MacOS - Voice Over (built-in)

Accessibility tree

@images/accessibility-tree.png

Accessibility tree vs DOM tree

Tips for developing for visual impairments:

* Use Semantic HTML
* Text size
* Use headings appropriately
* Image alt tags
* Use links & buttons right
* ARIA roles and attributes - as needed

ARIA = Accessible Rich
Internet Applications

The best ARIA
is no ARIA

Tips for designing for visual impairments:

* Color-blindness
* Contrast
* Z-Pattern
* Open-Graph & Favicon

Wave and/or axe Chrome Plugin

@images/contrast.png

@images/z-scan.png

Motor Concerns

* Responsive Applications
* Skip menus
* Tab flow
* Focus indicators
* "Submit" actions (space/enter)
* "Cancel" actions (esc)

@images/modal.png

DEMO

Auditory Concerns

For primary audio media:

* Subtitles
* Volume controls
* Ideally default to a "muted" state

My advice:

Use YouTube or Vimeo

For supplemental audio:

* Visual cues
* Nothing absurd (i.e. loud, lengthy, confusing)

Cognitive Concerns

* Good content
* Good UX
* "Panic" mode

Good Content

* Labels
* Titles / Headings
* Call to Actions

Good UX

* Consider all user workflows
* Build wireframes

"Panic" mode

Think websites like:
* Hospitals
* Schools
* Local News / Weather

Make a few things incredibly simple

Bonus Disability

Drum Roll...

"Data" Disability

Not all users have a ton of data,
let alone fast connections

So what can you do?

0. Optimize your images
1. Minify & Tree-shake your CSS and JS
2. Don't overdo it on custom fonts
3. Use caching

@images/super-mario.png

References & Demo
https://alkrauss48.github.io/developing-for-accessibility-talk/

GitHub Repo
https://github.com/alkrauss48/developing-for-accessibility-talk

How to Get Involved
Beyond Thunderplains

Go to these links:
* meetup.com/pro/techlahoma
* slack.techlahoma.org

Thanks!

Aaron Krauss
thecodeboss.dev
@thecodeboss
